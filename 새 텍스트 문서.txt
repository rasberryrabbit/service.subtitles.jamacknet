# Define a class for the Dialog to show the URL
class MyClass(xbmcgui.WindowDialog):
  # Opening a xbmcgui.Window does not work, since the open settings dialog prevents this (http://forum.kodi.tv/showthread.php?tid=262100&pid=2263074#pid2263074)
  # Use xbmcgui.WindowDiaolog to be able to show the QR-code image
  def __init__(self, authorize_url):
      
    # save window resolution to arrange the text fields an QR code
    screenx = self.getWidth()
    screeny = self.getHeight()
    utils.log('Screen resolution: %dx%d' % (screenx, screeny), xbmc.LOGDEBUG)
    # Show Dialog with Dropbox Authorization URL

    res_qr_code = [0,0] # resolution of the QR-code image.
    # Show QR-Code Dropbox Authorization URL (source code from qr-code.py from service.linuxwhatelse.notify)
    if PIL_AVAILABLE:
        tmp_dir = os.path.join(utils.data_dir()) # tmp_dir has to exist
        tmp_file = os.path.join(tmp_dir, 'dropbox-auth-qr-code.png')
        # Create the QR-code image and save it to temp direcotry
        qr = qrcode.main.QRCode(box_size=40, border=2)
        qr.add_data(authorize_url)
        qr.make(fit=True)
        img = qr.make_image()
        img.save(tmp_file)
        # Show the QR-Code in Kodi
        # http://www.programcreek.com/python/example/84322/xbmcgui.getCurrentWindowId
        utils.log('Add control image with %dx%d at (%d,%d)' % (screeny/2, screeny/2, 100, 100), xbmc.LOGDEBUG)
        res_qr_code = [screeny/4, screeny/4] # TODO: the image is displayed bigger than the desired size. Find out why.
        image = xbmcgui.ControlImage(100, 100, res_qr_code[0], res_qr_code[1], tmp_file)
        self.addControl(image)
    else:
        # The PIL module isn't available so we inform the user about it
        utils.showNotification(utils.getString(32102), utils.getString(32201))

    # Print the Information text below the QR code
    self.addControl(xbmcgui.ControlLabel(x=100, y=(100+res_qr_code[1]+ 50), width=screenx, height=25, label=utils.getString(32704), textColor='0xFFFFFFFF'))
    self.addControl(xbmcgui.ControlLabel(x=100, y=(100+res_qr_code[1]+100), width=screenx, height=25, label=authorize_url, textColor='0xFFFFFFFF'))
    self.addControl(xbmcgui.ControlLabel(x=100, y=(100+res_qr_code[1]+150), width=screenx, height=25, label=utils.getString(32705), textColor='0xFFFFFFFF'))

    # this shows the window on the screen
    self.show()

  def onAction(self, action):
    # the window will be closed with any key
self.close()

